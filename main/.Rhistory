percent_men <- (sum(men$Freq)%%sum(men_survived$Freq)) * 100
women_survived <- women[women$Survived == "Yes" & women$Class == t, ]
children_survived <- children[children$Survived == "Yes" & children$Class == t, ]
women_and_children_survived <- women_survived$Freq + children_survived$Freq
women_and_children <- women$Freq + num_children
percent_women_children <- (women_and_children_survived%%women_and_children) * 100
return(paste0("Of ", t, " class, ", percent_women, "% of women and children survived and ", percent_men, "% of men survived."))
}
## Define a function called `survival_rate` that takes in a ticket class
## (i.e., "1st", "2nd", "3rd" or "Crew") as an argument.
## This function should return a sentence describing the total survival rate of men
## vs. "women and children" in that ticketing class.
##
## For example, for 'Crew' class, the function shoult report 87 and 22% in a sentence
## like this:
##
survival_rate <- function(t) {
men <- Titanic[Titanic$Sex == "Male" & Titanic$Age == "Adult", ]
print(men)
women <- Titanic[Titanic$Sex == "Female" & Titanic$Age == "Adult", ]
print(women)
men_survived <- men[men$Survived == "Yes" & men$Class == t, ]
percent_men <- (sum(men$Freq)%%sum(men_survived$Freq)) * 100
women_survived <- women[women$Survived == "Yes" & women$Class == t, ]
children_survived <- children[children$Survived == "Yes" & children$Class == t, ]
women_and_children_survived <- women_survived$Freq + children_survived$Freq
women_and_children <- women$Freq + num_children
percent_women_children <- (women_and_children_survived%%women_and_children) * 100
return(paste0("Of ", t, " class, ", percent_women_children, "% of women and children survived and ", percent_men, "% of men survived."))
}
## Call your `survival_rate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
survival_rate("1st")
x <- -5:5
y <- x^2
plot(x,y)
library(babynames)
tail(babynames)
babynames %>%
filter(year == 1900) %>%
source('~/info201/homework/a3-data-morgaell/assignment.R', echo=TRUE)
filter(name == "Anna")
library(dplyr)
babynames %>% filter(year > 1900) %>% filter(name == "Anna") %>% ggplot() + geom_line(aes(year, n, col = red), size =5) +
geom
babynames %>%
filter(names == "Anna") %>%
ggplot() + geom_line(aes(year, n, col = sex) size = 5)
source('~/info201/homework/a3-data-morgaell/assignment.R', echo=TRUE)
babynames %>% filter(namee == "Anna") %>% ggplot() + geom_line(aes(year, n, col=sex), size=5) + geom_point(aes(year,n,col=sex), size=10)
> babynames %>% filter(name == "Anna") %>% ggplot() + geom_line(aes(year, n, col=sex), size=5) + geom_point(aes(year,n,col=sex), size=10) +
babynames %>%
filter(name == "Elizabeth") %>%
group_by(sex, year %/% 10) %>%
summarize(mn=mean(n)) %>%
mutate(year)
babynames %>%
filter(name == "Elizabeth") %>%
group_by(sex, decade = year %/% 10) %>%
summarize(mn = mean(n)) %>%
mutate(year = decade*10 + 5) %>%
ggplot() +
geom_line(aes(year, mn, col=sex), size=4) +
scale_y_log10()
babynames %>%
filter(name == "Ethan") %>%
filter(year > 2000) %>%
ggplot() + geom_col(aes(x=year, year=n))
babynames %>%
filter(name == "Ethan") %>%
filter(year > 2000) %>%
ggplot() +
geom_col(aes(x=year, y=n), fill="skyblue"))
babynames %>%
filter(name == "Elizabeth") %>%
filter(year > 2000) %>%
ggplot() +
geom_col(aes(x=year, y=n), fill="skyblue")
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
install.packages("fueleconomy")
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
#install.packages("fueleconomy")
load(fueleconomy)
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
#install.packages("fueleconomy")
load("fueleconomy")
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
#install.packages("fueleconomy")
load(fueleconomy)
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
#install.packages("fueleconomy")
load("fueleconomy")
## This exercise need the "fueleconomy" package.  Install and load it.
## You should have have access to the `vehicles` data.frame
#install.packages("fueleconomy")
library(fueleconomy)
## Install (if you haven't already) and load the `dplyr`package
install.packages("dplyr")
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
cars_1997 <- filter(vehicles,year == 1997)
View(cars_1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(cars_1997$year)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
two.wheel.drive.2o.mpg <- filter(vehicles, drive == "2-Wheel Drive", cty > 20)
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
filtered.mpg <- filter(two.wheel.drive.2o.mpg, hwy == min(hwy))
worst.hwy.id <- select(filtered.mpg, id)
print(worst.hwy.id)
View(worst.hwy.id)
View(worst.hwy.id)
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
MakeYear <- function(my.make, my.year) {
filtered <- filter(vehicles, year == my.year, make == my.make) %>%
filter(hwy == max(hwy))
return(filtered)
}
# What was the most efficient honda model of 1995?
MakeYear("Honda", 1995)
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
MakeYearFilter <- function(my.make, my.year) {
filtered <- filter(vehicles, year == my.year, make == my.make) %>%
filter(hwy == max(hwy))
return(filtered)
}
# What was the most efficient honda model of 1995?
MakeYearFilter("Honda", 1995)
library("Titanic")
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
ggplot(north_america) + geom_point(mapping=(aes=(x=longitude, y=latitude)))
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
ggplot(north_america) + geom_point(mapping=(aes(x=longitude, y=latitude)))
library(ggplot2)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
ggplot(north_america) + geom_point(mapping=(aes(x=longitude, y=latitude)))
## filter out North American observations
#north_america <- filter(temp_prec, temp_prec$longitude > 10)
## delete the original (large data) from R workspace
## this is necessary to conserve memory.
ggplot(temp_prec) + geom_point(mapping=(aes(x=longitude, y=latitude)))
## read the data
temp_prec <- data.table::fread('temp-prec-tiny.csv.bz2')
shiny::runApp
shiny::runApp('info201/classwork/05-20-19/demo')
runApp('info201/classwork/05-20-19/demo')
runApp('info201/classwork/05-20-19/demo')
runApp('info201/classwork/05-20-19/demo')
runApp('info201/classwork/05-20-19/demo')
runApp('info201/classwork/05-20-19/demo')
shiny::runApp('info201/final_project/us-women-bachelors/ellyssa/final')
setwd("~/info201/final_project/us-women-bachelors/ellyssa/final")
runApp()
library(dplyr)
runApp()
runApp()
setwd("~/info201/final_project/us-women-bachelors/ellyssa/final")
runApp('~/info201/final_project/us-women-bachelors')
runApp()
runApp()
runApp()
setwd("~/info201/final_project/us-women-bachelors/ellyssa")
runApp('final')
setwd("~/info201/final_project/us-women-bachelors/ellyssa/final")
runApp()
runApp()
library(shiny)
majors <- data %>%
select(-Year)
major_names <- colnames(majors)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
navbarPage("US Women's Bachelors Degrees",
tabPanel("Data By Degree",
sidebarLayout(
sidebarPanel(
selectInput("majors",
label = "Select a Major",
choices = major_names)
),
mainPanel(
plotOutput("major_plot")
)
)
),
tabPanel("All Degree Data",
sidebarLayout(
sidebarPanel(
numericInput("date",
"Select a Year",
value = 2011,
min = 1970,
max = 2011)
),
mainPanel(
plotOutput("all_majors_plot")
)
)
)
)
))
library(dplyr)
majors <- data %>%
select(-Year)
major_names <- colnames(majors)
library(shiny)
library(dplyr)
library(ggplot2)
data <- read.csv("data/percent-bachelors-degrees-women-usa.csv")
data <- as.data.frame(data)
shinyServer(function(input, output) {
output$major_plot <- renderPlot ({
selected_major <- data[[input$majors]]
plot1 <- ggplot(data)+
geom_bar(stat = "identity", fill = '#b9c6fa', aes(x = Year , y = selected_major)) +
ylab("Percentage of Degrees") +
ggtitle("Degrees by Academic Specialty")
return(plot1)
})
output$all_majors_plot <- renderPlot ({
df <- data.frame(data, row.names = data$Year)
df <- select(df, -Year)
df <- data.frame(t(df))
df <- mutate(df, degrees = row.names(df))
user_in <- paste0("X", input$date)
get_year <- df[[user_in]]
get_major <- df$degrees
plot2 <- ggplot(df) +
geom_bar(stat = "identity", fill = '#6685ff', aes(x = degrees , y = get_year))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab("Major") +
ylab("Percentage of Degrees") +
ggtitle("Degrees by Year")
return(plot2)
})
})
library(shiny)
library(dplyr)
majors <- data %>%
select(-Year)
major_names <- colnames(majors)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
navbarPage("US Women's Bachelors Degrees",
tabPanel("Data By Degree",
sidebarLayout(
sidebarPanel(
selectInput("majors",
label = "Select a Major",
choices = major_names)
),
mainPanel(
plotOutput("major_plot")
)
)
),
tabPanel("All Degree Data",
sidebarLayout(
sidebarPanel(
numericInput("date",
"Select a Year",
value = 2011,
min = 1970,
max = 2011)
),
mainPanel(
plotOutput("all_majors_plot")
)
)
)
)
))
runApp()
library(shiny)
library(dplyr)
majors <- data %>%
select(-Year)
major_names <- colnames(majors)
selected_year <- unique(data$Year)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
navbarPage("US Women's Bachelors Degrees",
tabPanel("Data By Degree",
sidebarLayout(
sidebarPanel(
selectInput("majors",
label = "Select a Major",
choices = major_names)
),
mainPanel(
plotOutput("major_plot")
)
)
),
tabPanel("All Degree Data",
sidebarLayout(
sidebarPanel(
numericInput("date",
"Select a Year",
value = 2011,
min = 1970,
max = 2011)
),
mainPanel(
plotOutput("all_majors_plot")
)
)
),
tabPanel("Compare",
sidebarLayout(
sidebarPanel(
selectInput("Year1",
"Choose a year",
choices = selected_year,
selected = "1970"
),
selectInput("Year2",
"Choose a different year",
choices = select_year,
selected = "1971"
)
),
mainPanel(
plotOutput("pie1"),
plotOutput("pie2")
)
)
)
)
))
library(shiny)
library(dplyr)
majors <- data %>%
select(-Year)
major_names <- colnames(majors)
selected_year <- unique(data$Year)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
navbarPage("US Women's Bachelors Degrees",
tabPanel("Data By Degree",
sidebarLayout(
sidebarPanel(
selectInput("majors",
label = "Select a Major",
choices = major_names)
),
mainPanel(
plotOutput("major_plot")
)
)
),
tabPanel("All Degree Data",
sidebarLayout(
sidebarPanel(
numericInput("date",
"Select a Year",
value = 2011,
min = 1970,
max = 2011)
),
mainPanel(
plotOutput("all_majors_plot")
)
)
),
tabPanel("Compare",
sidebarLayout(
sidebarPanel(
selectInput("Year1",
"Choose a year",
choices = selected_year,
selected = "1970"
),
selectInput("Year2",
"Choose a different year",
choices = selected_year,
selected = "1971"
)
),
mainPanel(
plotOutput("pie1"),
plotOutput("pie2")
)
)
)
)
))
runApp()
library(shiny)
library(dplyr)
library(ggplot2)
library(scales)
data <- read.csv("data/percent-bachelors-degrees-women-usa.csv")
data <- as.data.frame(data)
shinyServer(function(input, output) {
output$major_plot <- renderPlot ({
selected_major <- data[[input$majors]]
plot1 <- ggplot(data)+
geom_bar(stat = "identity", fill = '#b9c6fa', aes(x = Year , y = selected_major)) +
ylab("Percentage of Degrees") +
ggtitle("Degrees by Academic Specialty")
return(plot1)
})
output$all_majors_plot <- renderPlot ({
df <- data.frame(data, row.names = data$Year)
df <- select(df, -Year)
df <- data.frame(t(df))
df <- mutate(df, degrees = row.names(df))
user_in <- paste0("X", input$date)
get_year <- df[[user_in]]
get_major <- df$degrees
plot2 <- ggplot(df) +
geom_bar(stat = "identity", fill = '#6685ff', aes(x = degrees , y = get_year))+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
xlab("Major") +
ylab("Percentage of Degrees") +
ggtitle("Degrees by Year")
return(plot2)
})
output$pie1 <- renderPlot({
data <- data %>%
filter(Year == input$Year1)
colnms=c("Biology", "Computer.Science", "Engineering", "Math.and.Statistics", "Physical.Sciences")
data$new_col<-rowSums(data[,colnms])
colnm=c("Agriculture", "Architecture", "Art.and.Performance", "Business",
"Communications.and.Journalism", "Education", "English", "Foreign.Languages",
"Health.Professions", "Psychology", "Public.Administration", "Social.Sciences.and.History")
data$col<-rowSums(data[,colnm])
data <- data %>%
select(new_col, col)
newdf <-  as.data.frame(t(data))
newdf <- data.frame(major = rownames(newdf), number = newdf, row.names = NULL)
sum <- newdf[1,2] + newdf[2,2]
p <- ggplot(newdf, aes(x="", y=V1, fill=major))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(y = V1/2 + c(0, cumsum(V1)[-length(V1)]),
label = percent(V1/sum)), size=5)
return(p)
})
})
runApp()
output$pie2 <- renderPlot({
data <- data %>%
filter(Year == input$Year2)
colnms=c("Biology", "Computer.Science", "Engineering", "Math.and.Statistics", "Physical.Sciences")
data$new_col<-rowSums(data[,colnms])
colnm=c("Agriculture", "Architecture", "Art.and.Performance", "Business",
"Communications.and.Journalism", "Education", "English", "Foreign.Languages",
"Health.Professions", "Psychology", "Public.Administration", "Social.Sciences.and.History")
data$col<-rowSums(data[,colnm])
data <- data %>%
select(new_col, col)
newdf <-  as.data.frame(t(data))
newdf <- data.frame(major = rownames(newdf), number = newdf, row.names = NULL)
sum <- newdf[1,2] + newdf[2,2]
p <- ggplot(newdf, aes(x="", y=V1, fill=major))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(y = V1/2 + c(0, cumsum(V1)[-length(V1)]),
label = percent(V1/sum)), size=5)
return(p)
})
output$pie2 <- renderPlot({
data <- data %>%
filter(Year == input$Year2)
colnms=c("Biology", "Computer.Science", "Engineering", "Math.and.Statistics", "Physical.Sciences")
data$new_col<-rowSums(data[,colnms])
colnm=c("Agriculture", "Architecture", "Art.and.Performance", "Business",
"Communications.and.Journalism", "Education", "English", "Foreign.Languages",
"Health.Professions", "Psychology", "Public.Administration", "Social.Sciences.and.History")
data$col<-rowSums(data[,colnm])
data <- data %>%
select(new_col, col)
newdf <-  as.data.frame(t(data))
newdf <- data.frame(major = rownames(newdf), number = newdf, row.names = NULL)
sum <- newdf[1,2] + newdf[2,2]
p2 <- ggplot(newdf, aes(x="", y=V1, fill=major))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
geom_text(aes(y = V1/2 + c(0, cumsum(V1)[-length(V1)]),
label = percent(V1/sum)), size=5)
return(p2)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
